import { z } from "zod";
import { ChatOpenAI } from "@langchain/openai";
import { PromptTemplate } from "@langchain/core/prompts";
import { StructuredOutputParser } from "langchain/output_parsers";

const parser = StructuredOutputParser.fromZodSchema(
  z
    .array(
      z.object({
        id: z
          .string()
          .describe("the id of the past experience received form the user"),
        bulletPoint: z
          .string()
          .describe("the bullet point generated by the model"),
      })
    )
    .describe("a list of generated bullet points")
);

const getPrompt = async (pastExperiences: string, jobDescription: string) => {
  const format_instructions = parser.getFormatInstructions();

  const prompt = new PromptTemplate({
    template:
      "Given my past work experiences and the job description for a position I'm applying to, generate one resume bullet point per experience. Each bullet point should highlight the skills required for the job I'm applying to, while incorporating the context, projects, and metrics from my past experiences. Use the provided job description to extract the necessary skills, and use my detailed experience information to create believable and relevant resume bullet points. Return the bullet points as an array of objects, where each object contains the generated bullet point and the corresponding experience ID. Follow the intrusctions and format your response to match the format instructions, no matter what! \n{format_instructions}\nPast Experiences: {pastExperiences}\n\nJob Description: {jobDescription}",
    inputVariables: ["pastExperiences", "jobDescription"],
    partialVariables: { format_instructions },
  });

  const input = await prompt.format({
    pastExperiences: JSON.stringify(pastExperiences, null, 2),
    jobDescription: jobDescription,
  });

  return input;
};

export async function POST(request: Request) {
  const body = await request.json();
  const { jobDescription } = body;
  if (!prompt) {
    return Response.json({ error: "No prompt provided" });
  }
  const pastExperiences = "get from db";
  try {
    const input = await getPrompt(pastExperiences, jobDescription);
    console.log(input, "input");
    const model = new ChatOpenAI({
      temperature: 0,
      modelName: "gpt-3.5-turbo",
    });
    const output = await model.invoke(input);
    const data = await parser.invoke(output);

    console.log("data", data);
    return Response.json({ data });
  } catch (err) {
    return Response.json({
      error: "There was an error generating the response.",
    });
  }
}
